<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SLAMBotClasses</name>
    </assembly>
    <members>
        <member name="M:SLAMBotClasses.KinectSlam.#ctor">
            <summary>
            Use the /// on each method and property, or atleast the public ones
            </summary>
        </member>
        <member name="M:SLAMBotClasses.KinectSlam.WriteWavHeader(System.IO.Stream)">
            <summary>
            A bare bones WAV file header writer
            </summary>        
        </member>
        <member name="T:SLAMBotClasses.ControllerSlam">
            <summary>
            This is for the XBox remote control. Use this to easily drive the robot.
            </summary>
        </member>
        <member name="M:SLAMBotClasses.ControllerSlam.#ctor">
            <summary>
            Starts up the ControllerSlam class.
            </summary>
        </member>
        <member name="M:SLAMBotClasses.ControllerSlam.ResetControls">
            <summary>
            Resets everything to it's defaults. You shouldn't really need to call this.
            </summary>
        </member>
        <member name="E:SLAMBotClasses.ControllerSlam.OnButtonsChanged">
            <summary>
            This event gets fired when a button has been pressed on the controller.
            </summary>
        </member>
        <member name="P:SLAMBotClasses.ControllerSlam.LeftStick">
            <summary>
            Gets the position of the left thumb stick, value is between -1 and 1
            </summary>
        </member>
        <member name="P:SLAMBotClasses.ControllerSlam.RightStick">
            <summary>
            Gets the position of the right thumb stick, value is between -1 and 1
            </summary>
        </member>
        <member name="P:SLAMBotClasses.ControllerSlam.CameraMove">
            <summary>
            Gets the position of the right - left trigger which is use to move the Kinect camers.
            </summary>
        </member>
        <member name="T:SLAMBotClasses.ControllerSlam.ButtonArgs">
            <summary>
            Arguments returned from the OnButtonsChanged() event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SLAMBotClasses.ArduinoSlam" -->
        <member name="M:SLAMBotClasses.ArduinoSlam.#ctor">
            <summary>
            Inits the ArduinoSlam class
            </summary>
        </member>
        <member name="M:SLAMBotClasses.ArduinoSlam.Connect">
            <summary>
            This will connect your computer to the arduino micro-controller which
            will allow the two to communicate. This will scan all the COM ports on
            your computer and automatically find the Arduino. This method is asynchronous
            so you can call it and wait for the OnStatusChanged event to tell you it's connected.
            </summary>
        </member>
        <member name="M:SLAMBotClasses.ArduinoSlam.CloseConnection">
            <summary>
            If you are connected to the Arduino this will close the connection. You should
            do this before exiting the program but it's not a big deal if you don't.
            </summary>
        </member>
        <member name="M:SLAMBotClasses.ArduinoSlam.TurnTestLightOff">
            <summary>
            There is a very small LED on the arduino near pin 13, this turns it off.
            </summary>
        </member>
        <member name="M:SLAMBotClasses.ArduinoSlam.TurnTestLightOn">
            <summary>
            There is a very small LED on the arduino near pin 13, this turns it on.
            </summary>
        </member>
        <member name="M:SLAMBotClasses.ArduinoSlam.SendGForceAndTemp(System.Boolean)">
            <summary>
            This will tell the arduino that you want to have it start or stop sending you
            information about the accelerometer and temperature sensor. This information
            will be sent to you through the OnSensorInfoReady event and will fire about
            every 200 milliseconds.
            </summary>
            <param name="OffOrOn"></param>
        </member>
        <member name="M:SLAMBotClasses.ArduinoSlam.SetLeftMotor(System.Double)">
            <summary>
            Sets the speed of the left side of the robot
            </summary>
            <param name="value">Can be between -1 and 1. -1 is full speed backwards 1 is full speed forward.</param>
        </member>
        <member name="M:SLAMBotClasses.ArduinoSlam.SetRightMotor(System.Double)">
            <summary>
            Sets the speed of the right side of the robot
            </summary>
            <param name="value">Can be between -1 and 1. -1 is full speed backwards 1 is full speed forward.</param>
        </member>
        <member name="E:SLAMBotClasses.ArduinoSlam.OnStatusChanged">
            <summary>
            Fires when the status of the Arduino micro-controller has changed.
            Lets you know if it is connecting, connected or disconnected.
            </summary>
        </member>
        <member name="E:SLAMBotClasses.ArduinoSlam.OnSensorInfoReady">
            <summary>
            Fires when the Arduino has sent you information. This is for
            reading the accelerometer or temperature sensor.
            </summary>
        </member>
        <member name="P:SLAMBotClasses.ArduinoSlam.Status">
            <summary>
            Gets the status of the arduino. Connected, connecting or disconnected.
            </summary>
        </member>
        <member name="T:SLAMBotClasses.ArduinoSlam.ArduinoCommands">
            <summary>
            This is the command you want the robot to do
            </summary>
        </member>
        <member name="T:SLAMBotClasses.ArduinoSlam.ArduinoStatus">
            <summary>
            This is the emnu that lets you know the status of the Arduino.
            </summary>
        </member>
        <member name="T:SLAMBotClasses.ArduinoSlam.StatusArgs">
            <summary>
            Contains the status of the Arduino that gets sent to you
            when the OnStatusChanged event gets fired.
            </summary>
        </member>
        <member name="M:SLAMBotClasses.ArduinoSlam.StatusArgs.#ctor(SLAMBotClasses.ArduinoSlam.ArduinoStatus)">
            <summary>
            Constructor for the status args.
            </summary>
            <param name="Status"></param>
        </member>
        <member name="P:SLAMBotClasses.ArduinoSlam.StatusArgs.Status">
            <summary>
            Status of the Arduino.
            </summary>
        </member>
        <member name="T:SLAMBotClasses.ArduinoSlam.SensorInfoArgs">
            <summary>
            Contains the sensor information that gets sent to you when
            the OnSensorInfoReady event is fired.
            </summary>
        </member>
        <member name="F:SLAMBotClasses.ArduinoSlam.SensorInfoArgs.XForce">
            <summary>
            The force is measured in G's the Temperature is in ferinheight.
            </summary>
        </member>
        <member name="F:SLAMBotClasses.ArduinoSlam.SensorInfoArgs.YForce">
            <summary>
            The force is measured in G's the Temperature is in ferinheight.
            </summary>
        </member>
        <member name="F:SLAMBotClasses.ArduinoSlam.SensorInfoArgs.ZForce">
            <summary>
            The force is measured in G's the Temperature is in ferinheight.
            </summary>
        </member>
        <member name="F:SLAMBotClasses.ArduinoSlam.SensorInfoArgs.Temperature">
            <summary>
            The force is measured in G's the Temperature is in ferinheight.
            </summary>
        </member>
        <member name="M:SLAMBotClasses.ArduinoSlam.SensorInfoArgs.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor for the SensorInfoArgs.
            </summary>
            <param name="XForce">easured in G's</param>
            <param name="YForce">easured in G's</param>
            <param name="ZForce">easured in G's</param>
            <param name="Temperature">easured in ferinheight</param>
        </member>
        <member name="T:SLAMBotClasses.Common">
            <summary>
            Contains general / random methods that are useful
            </summary>
        </member>
        <member name="M:SLAMBotClasses.Common.GetIP">
            <summary>
            Gets the internal IP on the computer.
            </summary>
            <returns>IP address as a string</returns>
        </member>
    </members>
</doc>
